package com.mogujie.tt.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mogujie.tt.DB.entity.TravelEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TravelInfo.
*/
public class TravelDao extends AbstractDao<TravelEntity, Long> {

    public static final String TABLENAME = "TravelInfo";

    /**
     * Properties of entity TravelEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DbId = new Property(1, int.class, "dbId", false, "DB_ID");
        public final static Property CreatorId = new Property(2, int.class, "creatorId", false, "CREATOR_ID");
        public final static Property Duration = new Property(3, int.class, "duration", false, "DURATION");
        public final static Property StartDate = new Property(4, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(5, String.class, "endDate", false, "END_DATE");
        public final static Property StartPlace = new Property(6, String.class, "startPlace", false, "START_PLACE");
        public final static Property EndPlace = new Property(7, String.class, "endPlace", false, "END_PLACE");
        public final static Property Destination = new Property(8, String.class, "destination", false, "DESTINATION");
        public final static Property DestinationBK = new Property(9, String.class, "destinationBK", false, "DESTINATION_BK");
        public final static Property PersonNum = new Property(10, int.class, "personNum", false, "PERSON_NUM");
        public final static Property TrafficWay = new Property(11, int.class, "trafficWay", false, "TRAFFIC_WAY");
        public final static Property TrafficStartTime = new Property(12, String.class, "trafficStartTime", false, "TRAFFIC_START_TIME");
        public final static Property TrafficEndTime = new Property(13, String.class, "trafficEndTime", false, "TRAFFIC_END_TIME");
        public final static Property TrafficQuality = new Property(14, int.class, "trafficQuality", false, "TRAFFIC_QUALITY");
        public final static Property PlayQuality = new Property(15, int.class, "playQuality", false, "PLAY_QUALITY");
        public final static Property PlayStartTime = new Property(16, String.class, "playStartTime", false, "PLAY_START_TIME");
        public final static Property PlayEndTime = new Property(17, String.class, "playEndTime", false, "PLAY_END_TIME");
        public final static Property CityTraffic = new Property(18, int.class, "cityTraffic", false, "CITY_TRAFFIC");
        public final static Property HotelPosition = new Property(19, int.class, "hotelPosition", false, "HOTEL_POSITION");
        public final static Property SightSelect = new Property(20, int.class, "sightSelect", false, "SIGHT_SELECT");
        public final static Property Cost = new Property(21, int.class, "cost", false, "COST");
        public final static Property Version = new Property(22, int.class, "version", false, "VERSION");
        public final static Property Status = new Property(23, int.class, "status", false, "STATUS");
        public final static Property Created = new Property(24, int.class, "created", false, "CREATED");
        public final static Property Updated = new Property(25, int.class, "updated", false, "UPDATED");
    };


    public TravelDao(DaoConfig config) {
        super(config);
    }
    
    public TravelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TravelInfo' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DB_ID' INTEGER NOT NULL UNIQUE ," + // 1: dbId
                "'CREATOR_ID' INTEGER NOT NULL ," + // 2: creatorId
                "'DURATION' INTEGER NOT NULL ," + // 3: duration
                "'START_DATE' TEXT NOT NULL ," + // 4: startDate
                "'END_DATE' TEXT NOT NULL ," + // 5: endDate
                "'START_PLACE' TEXT NOT NULL ," + // 6: startPlace
                "'END_PLACE' TEXT NOT NULL ," + // 7: endPlace
                "'DESTINATION' TEXT NOT NULL ," + // 8: destination
                "'DESTINATION_BK' TEXT NOT NULL ," + // 9: destinationBK
                "'PERSON_NUM' INTEGER NOT NULL ," + // 10: personNum
                "'TRAFFIC_WAY' INTEGER NOT NULL ," + // 11: trafficWay
                "'TRAFFIC_START_TIME' TEXT NOT NULL ," + // 12: trafficStartTime
                "'TRAFFIC_END_TIME' TEXT NOT NULL ," + // 13: trafficEndTime
                "'TRAFFIC_QUALITY' INTEGER NOT NULL ," + // 14: trafficQuality
                "'PLAY_QUALITY' INTEGER NOT NULL ," + // 15: playQuality
                "'PLAY_START_TIME' TEXT NOT NULL ," + // 16: playStartTime
                "'PLAY_END_TIME' TEXT NOT NULL ," + // 17: playEndTime
                "'CITY_TRAFFIC' INTEGER NOT NULL ," + // 18: cityTraffic
                "'HOTEL_POSITION' INTEGER NOT NULL ," + // 19: hotelPosition
                "'SIGHT_SELECT' INTEGER NOT NULL ," + // 20: sightSelect
                "'COST' INTEGER NOT NULL ," + // 21: cost
                "'VERSION' INTEGER NOT NULL ," + // 22: version
                "'STATUS' INTEGER NOT NULL ," + // 23: status
                "'CREATED' INTEGER NOT NULL ," + // 24: created
                "'UPDATED' INTEGER NOT NULL );"); // 25: updated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TravelInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TravelEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDbId());
        stmt.bindLong(3, entity.getCreatorId());
        stmt.bindLong(4, entity.getDuration());
        stmt.bindString(5, entity.getStartDate());
        stmt.bindString(6, entity.getEndDate());
        stmt.bindString(7, entity.getStartPlace());
        stmt.bindString(8, entity.getEndPlace());
        stmt.bindString(9, entity.getDestination());
        stmt.bindString(10, entity.getDestinationBK());
        stmt.bindLong(11, entity.getPersonNum());
        stmt.bindLong(12, entity.getTrafficWay());
        stmt.bindString(13, entity.getTrafficStartTime());
        stmt.bindString(14, entity.getTrafficEndTime());
        stmt.bindLong(15, entity.getTrafficQuality());
        stmt.bindLong(16, entity.getPlayQuality());
        stmt.bindString(17, entity.getPlayStartTime());
        stmt.bindString(18, entity.getPlayEndTime());
        stmt.bindLong(19, entity.getCityTraffic());
        stmt.bindLong(20, entity.getHotelPosition());
        stmt.bindLong(21, entity.getSightSelect());
        stmt.bindLong(22, entity.getCost());
        stmt.bindLong(23, entity.getVersion());
        stmt.bindLong(24, entity.getStatus());
        stmt.bindLong(25, entity.getCreated());
        stmt.bindLong(26, entity.getUpdated());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TravelEntity readEntity(Cursor cursor, int offset) {
        TravelEntity entity = new TravelEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // dbId
            cursor.getInt(offset + 2), // creatorId
            cursor.getInt(offset + 3), // duration
            cursor.getString(offset + 4), // startDate
            cursor.getString(offset + 5), // endDate
            cursor.getString(offset + 6), // startPlace
            cursor.getString(offset + 7), // endPlace
            cursor.getString(offset + 8), // destination
            cursor.getString(offset + 9), // destinationBK
            cursor.getInt(offset + 10), // personNum
            cursor.getInt(offset + 11), // trafficWay
            cursor.getString(offset + 12), // trafficStartTime
            cursor.getString(offset + 13), // trafficEndTime
            cursor.getInt(offset + 14), // trafficQuality
            cursor.getInt(offset + 15), // playQuality
            cursor.getString(offset + 16), // playStartTime
            cursor.getString(offset + 17), // playEndTime
            cursor.getInt(offset + 18), // cityTraffic
            cursor.getInt(offset + 19), // hotelPosition
            cursor.getInt(offset + 20), // sightSelect
            cursor.getInt(offset + 21), // cost
            cursor.getInt(offset + 22), // version
            cursor.getInt(offset + 23), // status
            cursor.getInt(offset + 24), // created
            cursor.getInt(offset + 25) // updated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TravelEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDbId(cursor.getInt(offset + 1));
        entity.setCreatorId(cursor.getInt(offset + 2));
        entity.setDuration(cursor.getInt(offset + 3));
        entity.setStartDate(cursor.getString(offset + 4));
        entity.setEndDate(cursor.getString(offset + 5));
        entity.setStartPlace(cursor.getString(offset + 6));
        entity.setEndPlace(cursor.getString(offset + 7));
        entity.setDestination(cursor.getString(offset + 8));
        entity.setDestinationBK(cursor.getString(offset + 9));
        entity.setPersonNum(cursor.getInt(offset + 10));
        entity.setTrafficWay(cursor.getInt(offset + 11));
        entity.setTrafficStartTime(cursor.getString(offset + 12));
        entity.setTrafficEndTime(cursor.getString(offset + 13));
        entity.setTrafficQuality(cursor.getInt(offset + 14));
        entity.setPlayQuality(cursor.getInt(offset + 15));
        entity.setPlayStartTime(cursor.getString(offset + 16));
        entity.setPlayEndTime(cursor.getString(offset + 17));
        entity.setCityTraffic(cursor.getInt(offset + 18));
        entity.setHotelPosition(cursor.getInt(offset + 19));
        entity.setSightSelect(cursor.getInt(offset + 20));
        entity.setCost(cursor.getInt(offset + 21));
        entity.setVersion(cursor.getInt(offset + 22));
        entity.setStatus(cursor.getInt(offset + 23));
        entity.setCreated(cursor.getInt(offset + 24));
        entity.setUpdated(cursor.getInt(offset + 25));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TravelEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TravelEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
