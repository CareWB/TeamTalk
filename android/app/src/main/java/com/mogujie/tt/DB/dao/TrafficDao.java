package com.mogujie.tt.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mogujie.tt.DB.entity.TrafficEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TrafficInfo.
*/
public class TrafficDao extends AbstractDao<TrafficEntity, Long> {

    public static final String TABLENAME = "TrafficInfo";

    /**
     * Properties of entity TrafficEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property No = new Property(2, String.class, "no", false, "NO");
        public final static Property StartStation = new Property(3, String.class, "startStation", false, "START_STATION");
        public final static Property EndStation = new Property(4, String.class, "endStation", false, "END_STATION");
        public final static Property StartTime = new Property(5, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(6, String.class, "endTime", false, "END_TIME");
        public final static Property Price = new Property(7, int.class, "price", false, "PRICE");
        public final static Property Extra = new Property(8, String.class, "extra", false, "EXTRA");
        public final static Property AddFlag = new Property(9, int.class, "addFlag", false, "ADD_FLAG");
        public final static Property Version = new Property(10, int.class, "version", false, "VERSION");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
        public final static Property Created = new Property(12, int.class, "created", false, "CREATED");
        public final static Property Updated = new Property(13, int.class, "updated", false, "UPDATED");
    };


    public TrafficDao(DaoConfig config) {
        super(config);
    }
    
    public TrafficDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TrafficInfo' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TYPE' INTEGER NOT NULL ," + // 1: type
                "'NO' TEXT NOT NULL ," + // 2: no
                "'START_STATION' TEXT NOT NULL ," + // 3: startStation
                "'END_STATION' TEXT NOT NULL ," + // 4: endStation
                "'START_TIME' TEXT NOT NULL ," + // 5: startTime
                "'END_TIME' TEXT NOT NULL ," + // 6: endTime
                "'PRICE' INTEGER NOT NULL ," + // 7: price
                "'EXTRA' TEXT NOT NULL ," + // 8: extra
                "'ADD_FLAG' INTEGER NOT NULL ," + // 9: addFlag
                "'VERSION' INTEGER NOT NULL ," + // 10: version
                "'STATUS' INTEGER NOT NULL ," + // 11: status
                "'CREATED' INTEGER NOT NULL ," + // 12: created
                "'UPDATED' INTEGER NOT NULL );"); // 13: updated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TrafficInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrafficEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindString(3, entity.getNo());
        stmt.bindString(4, entity.getStartStation());
        stmt.bindString(5, entity.getEndStation());
        stmt.bindString(6, entity.getStartTime());
        stmt.bindString(7, entity.getEndTime());
        stmt.bindLong(8, entity.getPrice());
        stmt.bindString(9, entity.getExtra());
        stmt.bindLong(10, entity.getAddFlag());
        stmt.bindLong(11, entity.getVersion());
        stmt.bindLong(12, entity.getStatus());
        stmt.bindLong(13, entity.getCreated());
        stmt.bindLong(14, entity.getUpdated());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrafficEntity readEntity(Cursor cursor, int offset) {
        TrafficEntity entity = new TrafficEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getString(offset + 2), // no
            cursor.getString(offset + 3), // startStation
            cursor.getString(offset + 4), // endStation
            cursor.getString(offset + 5), // startTime
            cursor.getString(offset + 6), // endTime
            cursor.getInt(offset + 7), // price
            cursor.getString(offset + 8), // extra
            cursor.getInt(offset + 9), // addFlag
            cursor.getInt(offset + 10), // version
            cursor.getInt(offset + 11), // status
            cursor.getInt(offset + 12), // created
            cursor.getInt(offset + 13) // updated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrafficEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setNo(cursor.getString(offset + 2));
        entity.setStartStation(cursor.getString(offset + 3));
        entity.setEndStation(cursor.getString(offset + 4));
        entity.setStartTime(cursor.getString(offset + 5));
        entity.setEndTime(cursor.getString(offset + 6));
        entity.setPrice(cursor.getInt(offset + 7));
        entity.setExtra(cursor.getString(offset + 8));
        entity.setAddFlag(cursor.getInt(offset + 9));
        entity.setVersion(cursor.getInt(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
        entity.setCreated(cursor.getInt(offset + 12));
        entity.setUpdated(cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrafficEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrafficEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
